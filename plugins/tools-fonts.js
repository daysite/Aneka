// ==================== FUENTES COMPLETAS SIN API ====================

// Generadores especiales
function reverseText(txt) {
  return txt.split('').reverse().join('')
}
function invertText(txt) {
  const map = { a:'…ê', b:'q', c:'…î', d:'p', e:'«ù', f:'…ü', g:'∆É', h:'…•', i:'·¥â', j:'…æ', k:' û', l:'l', m:'…Ø', n:'u', o:'o', p:'d', q:'b', r:'…π', s:'s', t:' á', u:'n', v:' å', w:' ç', x:'x', y:' é', z:'z' }
  return txt.split('').map(c => map[c.toLowerCase()] || c).join('')
}
function subscript(txt) {
  const map = { a:'‚Çê', e:'‚Çë', h:'‚Çï', i:'·µ¢', j:'‚±º', k:'‚Çñ', l:'‚Çó', m:'‚Çò', n:'‚Çô', o:'‚Çí', p:'‚Çö', r:'·µ£', s:'‚Çõ', t:'‚Çú', u:'·µ§', v:'·µ•', x:'‚Çì', y:'·µß', z:'·∂ª', 0:'‚ÇÄ',1:'‚ÇÅ',2:'‚ÇÇ',3:'‚ÇÉ',4:'‚ÇÑ',5:'‚ÇÖ',6:'‚ÇÜ',7:'‚Çá',8:'‚Çà',9:'‚Çâ'}
  return txt.split('').map(c => map[c] || map[c.toLowerCase()] || c).join('')
}
function superscript(txt) {
  const map = { a:'·µÉ', b:'·µá', c:'·∂ú', d:'·µà', e:'·µâ', f:'·∂†', g:'·µç', h:' ∞', i:'‚Å±', j:' ≤', k:'·µè', l:'À°', m:'·µê', n:'‚Åø', o:'·µí', p:'·µñ', r:' ≥', s:'À¢', t:'·µó', u:'·µò', v:'·µõ', w:' ∑', x:'À£', y:' ∏', z:'·∂ª', 0:'‚Å∞',1:'¬π',2:'¬≤',3:'¬≥',4:'‚Å¥',5:'‚Åµ',6:'‚Å∂',7:'‚Å∑',8:'‚Å∏',9:'‚Åπ'}
  return txt.split('').map(c => map[c] || map[c.toLowerCase()] || c).join('')
}

// üîπ Mapas est√°ndar A-Z a-z
function makeMap(upper, lower) {
  let map = {}
  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', a = 'abcdefghijklmnopqrstuvwxyz'
  for (let i=0;i<26;i++) {
    map[A[i]] = upper[i] || A[i]
    map[a[i]] = lower[i] || a[i]
  }
  return map
}

const fuentes = [
  { name:'CIRCLED', map:makeMap('‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè','‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©') },
  { name:'WIDE', map:makeMap('Ôº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫','ÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩö') },
  { name:'BOLD', map:makeMap('ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêô','ùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥') },
  { name:'ITALIC', map:makeMap('ùê¥ùêµùê∂ùê∑ùê∏ùêπùê∫ùêªùêºùêΩùêæùêøùëÄùëÅùëÇùëÉùëÑùëÖùëÜùëáùëàùëâùëäùëãùëåùëç','ùëéùëèùëêùëëùëíùëìùëî‚Ñéùëñùëóùëòùëôùëöùëõùëúùëùùëûùëüùë†ùë°ùë¢ùë£ùë§ùë•ùë¶ùëß') },
  { name:'BOLD ITALIC', map:makeMap('ùë®ùë©ùë™ùë´ùë¨ùë≠ùëÆùëØùë∞ùë±ùë≤ùë≥ùë¥ùëµùë∂ùë∑ùë∏ùëπùë∫ùëªùëºùëΩùëæùëøùíÄùíÅ','ùíÇùíÉùíÑùíÖùíÜùíáùíàùíâùíäùíãùíåùíçùíéùíèùíêùíëùííùíìùíîùíïùíñùíóùíòùíôùíöùíõ') },
  { name:'SCRIPT', map:makeMap('ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©','ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∏ùìπùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉ') },
  { name:'DOUBLESTRUCK', map:makeMap('ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§','ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´') },
  { name:'FRAKTUR', map:makeMap('ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®','ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑') },
  { name:'BOLD FRAKTUR', map:makeMap('ùï¨ùï≠ùïÆùïØùï∞ùï±ùï≤ùï≥ùï¥ùïµùï∂ùï∑ùï∏ùïπùï∫ùïªùïºùïΩùïæùïøùñÄùñÅùñÇùñÉùñÑùñÖ','ùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñü') },
  { name:'MONOSPACE', map:makeMap('ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂ùô∑ùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâ','ùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£') },
  { name:'SMALL CAPS', map:makeMap('ABCDEFGHIJKLMNOPQRSTUVWXYZ','·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢') },
  { name:'TAG', map:makeMap('ABCDEFGHIJKLMNOPQRSTUVWXYZ','üá¶üáßüá®üá©üá™üá´üá¨üá≠üáÆüáØüá∞üá±üá≤üá≥üá¥üáµüá∂üá∑üá∏üáπüá∫üáªüáºüáΩüáæüáø') },
  { name:'BLUE', map:makeMap('üá¶üáßüá®üá©üá™üá´üá¨üá≠üáÆüáØüá∞üá±üá≤üá≥üá¥üáµüá∂üá∑üá∏üáπüá∫üáªüáºüáΩüáæüáø','üá¶üáßüá®üá©üá™üá´üá¨üá≠üáÆüáØüá∞üá±üá≤üá≥üá¥üáµüá∂üá∑üá∏üáπüá∫üáªüáºüáΩüáæüáø') },
  { name:'ROCK DOTS', map:makeMap('AÃáBÃáCÃáDÃáEÃáFÃáGÃáHÃáIÃáJÃáKÃáLÃáMÃáNÃáOÃáPÃáQÃáRÃáSÃáTÃáUÃáVÃáWÃáXÃáYÃáZÃá','aÃábÃácÃádÃáeÃáfÃágÃáhÃáiÃájÃákÃálÃámÃánÃáoÃápÃáqÃárÃásÃátÃáuÃávÃáwÃáxÃáyÃázÃá') },
  { name:'REVERSED', fn:txt=>reverseText(txt) },
  { name:'INVERTED', fn:txt=>invertText(txt) },
  { name:'SUBSCRIPT', fn:txt=>subscript(txt) },
  { name:'SUPERSCRIPT', fn:txt=>superscript(txt) }
]

// üîπ Funci√≥n para convertir
function convertirFuente(texto, fuente) {
  if (fuente.fn) return fuente.fn(texto)
  return texto.split('').map(ch => fuente.map[ch] || ch).join('')
}

// ==================== HANDLER ====================
let handler = async (m,{text,usedPrefix,command})=>{
  if(!text){
    let lista = fuentes.map((f,i)=>`${i+1}. ${f.name}`).join('\n')
    return m.reply(`*üìÑ Lista de fuentes disponibles:*\n${lista}\n\n> Ejemplo: ${usedPrefix+command} 7 Shadow Ultra`)
  }

  const match = text.match(/^(\d+)\s+(.+)/)
  if(!match) return m.reply(`*‚ö†Ô∏è Coloca el n√∫mero de la fuente y el texto.*\nEjemplo:\n${usedPrefix+command} 3 Hola Mundo`)

  const index = parseInt(match[1])-1
  const input = match[2]
  if(index<0||index>=fuentes.length) return m.reply(`‚úñÔ∏è N√∫mero inv√°lido. Solo hay ${fuentes.length} fuentes.`)

  const fuente = fuentes[index]
  const salida = convertirFuente(input,fuente)
  m.reply(`*${fuente.name}:*\n${salida}`)
}

handler.help=['font']
handler.tags=['tools']
handler.command=/^font|fonts$/i

export default handler