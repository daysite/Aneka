import fs from 'fs'

const usuariosPath = './src/database/usuarios.json'

// Funci√≥n para cargar JSON
function cargarJSON(ruta, valorDefault = {}) {
  try {
    if (!fs.existsSync(ruta)) fs.writeFileSync(ruta, JSON.stringify(valorDefault, null, 2))
    const data = fs.readFileSync(ruta, 'utf-8').trim()
    return data ? JSON.parse(data) : valorDefault
  } catch (e) {
    console.error('Error al cargar JSON:', e)
    return valorDefault
  }
}

// Funci√≥n para guardar JSON
function guardarJSON(ruta, data) {
  try {
    fs.writeFileSync(ruta, JSON.stringify(data, null, 2))
  } catch (e) {
    console.error('Error al guardar JSON:', e)
  }
}

// Funci√≥n para obtener los Pok√©mon de un usuario (mejorada)
function obtenerPokemonesUsuario(user) {
  if (!user) return []
  
  // Buscar Pok√©mon en diferentes formatos posibles
  if (user.pokemones && Array.isArray(user.pokemones)) return user.pokemones
  if (user.pokemons && Array.isArray(user.pokemons)) return user.pokemons
  if (user.poke && Array.isArray(user.poke)) return user.poke
  
  // Formato antiguo: objeto √∫nico
  if (user.pokemon) {
    if (Array.isArray(user.pokemon)) return user.pokemon
    if (typeof user.pokemon === 'object') return [user.pokemon]
  }
  
  return []
}

// Funci√≥n para actualizar Pok√©mon en usuario
function actualizarPokemonUsuario(user, pokemonActualizado) {
  const pokemones = obtenerPokemonesUsuario(user)
  const index = pokemones.findIndex(p => p.nombre === pokemonActualizado.nombre)
  
  if (index !== -1) {
    pokemones[index] = pokemonActualizado
  }
  
  // Guardar en el formato original
  if (user.pokemones) user.pokemones = pokemones
  else if (user.pokemons) user.pokemons = pokemones
  else if (user.poke) user.poke = pokemones
  else user.pokemon = pokemones.length === 1 ? pokemones[0] : pokemones
  
  return user
}

// Funci√≥n para calcular el poder de un Pok√©mon
function calcularPoder(pokemon) {
  return (pokemon.vidaMax || 20) + 
         (pokemon.nivel || 1) * 5 + 
         (pokemon.ataque || 10) + 
         (pokemon.defensa || 5) +
         (pokemon.experiencia || 0) / 10
}

// Funci√≥n para simular batalla
function simularBatalla(pokeAtacante, pokeDefensor, userName, rivalName) {
  const poderAtacante = calcularPoder(pokeAtacante)
  const poderDefensor = calcularPoder(pokeDefensor)
  
  let resultado = `‚öîÔ∏è *BATALLA POK√âMON* ‚öîÔ∏è\n\n`
  resultado += `üë§ ${userName}\n`
  resultado += `üêæ ${pokeAtacante.nombre} (Nivel ${pokeAtacante.nivel || 1})\n`
  resultado += `‚ö° Poder: ${Math.round(poderAtacante)}\n\n`
  resultado += `üÜö\n\n`
  resultado += `üë§ ${rivalName}\n`
  resultado += `üêæ ${pokeDefensor.nombre} (Nivel ${pokeDefensor.nivel || 1})\n`
  resultado += `‚ö° Poder: ${Math.round(poderDefensor)}\n\n`
  
  // Simular turnos de batalla
  const turnos = Math.floor(Math.random() * 2) + 2
  for (let i = 1; i <= turnos; i++) {
    if (Math.random() > 0.4) {
      resultado += `‚è±Ô∏è Turno ${i}: ${pokeAtacante.nombre} ataca!\n`
    } else {
      resultado += `‚è±Ô∏è Turno ${i}: ${pokeDefensor.nombre} contraataca!\n`
    }
  }
  
  resultado += `\nüéØ *RESULTADO FINAL*:\n`
  
  const diferencia = Math.abs(poderAtacante - poderDefensor)
  const esEmpate = diferencia < 15

  if (esEmpate) {
    resultado += `ü§ù ¬°Empate! Ambos lucharon valientemente.\n`
    resultado += `‚ú® +15 EXP para ambos Pok√©mon\n`
    
    pokeAtacante.experiencia = (pokeAtacante.experiencia || 0) + 15
    pokeDefensor.experiencia = (pokeDefensor.experiencia || 0) + 15
    
  } else if (poderAtacante > poderDefensor) {
    const expGanada = 25 + Math.floor(diferencia / 3)
    pokeAtacante.experiencia = (pokeAtacante.experiencia || 0) + expGanada
    
    resultado += `üéâ ¬°${userName} gana la batalla!\n`
    resultado += `‚ú® ${pokeAtacante.nombre} gan√≥ ${expGanada} EXP\n`
    
    // Verificar subida de nivel
    const expNecesaria = (pokeAtacante.nivel || 1) * 100
    if (pokeAtacante.experiencia >= expNecesaria) {
      const nivelAnterior = pokeAtacante.nivel || 1
      pokeAtacante.nivel = nivelAnterior + 1
      pokeAtacante.vidaMax = (pokeAtacante.vidaMax || 20) + 10
      pokeAtacante.vida = pokeAtacante.vidaMax
      resultado += `üÜô ¬°${pokeAtacante.nombre} subi√≥ al nivel ${pokeAtacante.nivel}!`
    }
    
  } else {
    const expGanada = 25 + Math.floor(diferencia / 3)
    pokeDefensor.experiencia = (pokeDefensor.experiencia || 0) + expGanada
    
    resultado += `üòµ ¬°${rivalName} gana la batalla!\n`
    resultado += `‚ú® ${pokeDefensor.nombre} gan√≥ ${expGanada} EXP\n`
    
    // Verificar subida de nivel
    const expNecesaria = (pokeDefensor.nivel || 1) * 100
    if (pokeDefensor.experiencia >= expNecesaria) {
      const nivelAnterior = pokeDefensor.nivel || 1
      pokeDefensor.nivel = nivelAnterior + 1
      pokeDefensor.vidaMax = (pokeDefensor.vidaMax || 20) + 10
      pokeDefensor.vida = pokeDefensor.vidaMax
      resultado += `üÜô ¬°${pokeDefensor.nombre} subi√≥ al nivel ${pokeDefensor.nivel}!`
    }
  }
  
  return resultado
}

let handler = async (m, { conn, args, usedPrefix, command }) => {
  try {
    const usuarios = cargarJSON(usuariosPath)
    const userId = m.sender.replace(/[^0-9]/g, '')
    const user = usuarios[userId]

    if (!user) {
      return m.reply('‚ùå No est√°s registrado. Usa *.registrar* primero.')
    }
    
    const pokemonesUser = obtenerPokemonesUsuario(user)
    
    if (pokemonesUser.length === 0) {
      return m.reply('üò¢ No tienes Pok√©mon. Atrapa alguno primero.')
    }

    // Buscar usuario mencionado
    let mentioned = m.mentionedJid?.[0]
    if (!mentioned && args[0] && args[0].length > 5) {
      mentioned = args[0].replace(/[^0-9]/g, '') + '@s.whatsapp.net'
    }
    
    if (!mentioned) {
      let ayuda = `‚öîÔ∏è *SISTEMA DE BATALLAS* ‚öîÔ∏è\n\n`
      ayuda += `Para desafiar a otro jugador:\n`
      ayuda += `*${usedPrefix}pelear @usuario*\n\n`
      ayuda += `*${usedPrefix}pelear lista* - Ver tus Pok√©mon\n`
      ayuda += `*${usedPrefix}pelear cancelar* - Cancelar desaf√≠o`
      return m.reply(ayuda)
    }

    // COMANDOS ADICIONALES
    if (mentioned === 'lista' || mentioned === 'list') {
      let lista = `üìã *TUS POK√âMON* (${pokemonesUser.length})\n\n`
      pokemonesUser.forEach((poke, index) => {
        lista += `*${index + 1}.* ${poke.nombre} - Nvl ${poke.nivel || 1}\n`
        lista += `   ‚ù§Ô∏è ${poke.vida || 0}/${poke.vidaMax || 20} | ‚ö° ${Math.round(calcularPoder(poke))}\n\n`
      })
      return m.reply(lista)
    }

    if (mentioned === 'cancelar') {
      if (user.batallaTemporal) {
        delete user.batallaTemporal
        usuarios[userId] = user
        guardarJSON(usuariosPath, usuarios)
        return m.reply('‚úÖ Desaf√≠o cancelado.')
      }
      return m.reply('‚ùå No tienes desaf√≠os pendientes.')
    }

    const rivalId = mentioned.replace(/[^0-9]/g, '')
    const rival = usuarios[rivalId]

    if (!rival) {
      return m.reply('‚ùå Usuario no encontrado en la base de datos.')
    }
    
    if (userId === rivalId) {
      return m.reply('‚ùå No puedes pelear contra ti mismo.')
    }

    const pokemonesRival = obtenerPokemonesUsuario(rival)
    if (pokemonesRival.length === 0) {
      return m.reply('‚ö†Ô∏è El oponente no tiene Pok√©mon.')
    }

    // VERIFICAR SI YA HAY UN DESAF√çO EN CURSO
    if (user.batallaTemporal) {
      if (user.batallaTemporal.estado === 'seleccion_user') {
        return m.reply('‚ùå Ya tienes un desaf√≠o en proceso. Termina primero.')
      }
    }

    // MOSTRAR SELECCI√ìN DE POK√âMON
    let listaPokemones = `‚öîÔ∏è *DESAF√çO A ${rival.nombre || 'Entrenador'}* ‚öîÔ∏è\n\n`
    listaPokemones += `üéØ *SELECCIONA TU POK√âMON:*\n\n`
    
    pokemonesUser.forEach((poke, index) => {
      listaPokemones += `*${index + 1}.* ${poke.nombre} - Nvl ${poke.nivel || 1}\n`
      listaPokemones += `   ‚ù§Ô∏è ${poke.vida || 0}/${poke.vidaMax || 20} | ‚ö° ${Math.round(calcularPoder(poke))}\n\n`
    })
    
    listaPokemones += `Responde con el *n√∫mero* del Pok√©mon que quieres usar.\n`
    listaPokemones += `Ejemplo: *1* para ${pokemonesUser[0].nombre}`

    // GUARDAR ESTADO TEMPORAL
    user.batallaTemporal = {
      rivalId: rivalId,
      timestamp: Date.now(),
      estado: 'seleccion_user',
      paso: 'inicio'
    }
    
    usuarios[userId] = user
    guardarJSON(usuariosPath, usuarios)

    return m.reply(listaPokemones)

  } catch (error) {
    console.error('Error en handler pelear:', error)
    return m.reply('‚ùå Error al procesar el comando. Intenta nuevamente.')
  }
}

// HANDLER PARA MENSAJES DE TEXTO (selecci√≥n de Pok√©mon)
export async function before(m, { conn, usedPrefix }) {
  if (!m.text || m.isBaileys || !m.text.trim()) return false
  
  const usuarios = cargarJSON(usuariosPath)
  const userId = m.sender.replace(/[^0-9]/g, '')
  const user = usuarios[userId]
  const text = m.text.trim()

  if (!user || !user.batallaTemporal) return false

  // MANEJAR SELECCI√ìN DE POK√âMON DEL USUARIO
  if (user.batallaTemporal.estado === 'seleccion_user') {
    const seleccion = parseInt(text) - 1
    const pokemonesUser = obtenerPokemonesUsuario(user)
    
    if (isNaN(seleccion) || seleccion < 0 || seleccion >= pokemonesUser.length) {
      m.reply(`‚ùå N√∫mero inv√°lido. Elige entre 1 y ${pokemonesUser.length}.`)
      return true
    }

    const pokemonElegido = JSON.parse(JSON.stringify(pokemonesUser[seleccion])) // Copia profunda
    
    // ACTUALIZAR ESTADO
    user.batallaTemporal.pokemonUser = pokemonElegido
    user.batallaTemporal.estado = 'esperando_rival'
    user.batallaTemporal.paso = 'elegido'
    
    usuarios[userId] = user
    guardarJSON(usuariosPath, usuarios)

    const rivalId = user.batallaTemporal.rivalId
    const rival = usuarios[rivalId]
    
    if (!rival) {
      delete user.batallaTemporal
      usuarios[userId] = user
      guardarJSON(usuariosPath, usuarios)
      m.reply('‚ùå El rival ya no est√° disponible.')
      return true
    }

    // ENVIAR NOTIFICACI√ìN AL RIVAL
    let mensajeRival = `‚öîÔ∏è *¬°NUEVO DESAF√çO!* ‚öîÔ∏è\n\n`
    mensajeRival += `üë§ ${user.nombre || 'Entrenador'} te desaf√≠a a una batalla Pok√©mon!\n`
    mensajeRival += `üêæ Usar√°: ${pokemonElegido.nombre} (Nivel ${pokemonElegido.nivel || 1})\n\n`
    mensajeRival += `üí• *Para aceptar responde:*\n`
    mensajeRival += `*${usedPrefix}aceptar* - ¬°Aceptar el desaf√≠o!\n`
    mensajeRival += `*${usedPrefix}rechazar* - Rechazar el desaf√≠o\n\n`
    mensajeRival += `Tienes 2 minutos para responder.`

    try {
      await conn.sendMessage(rivalId + '@s.whatsapp.net', { text: mensajeRival })
      m.reply(`‚úÖ Desaf√≠o enviado a ${rival.nombre || 'el entrenador'}! Esperando respuesta...`)
    } catch (error) {
      console.error('Error al enviar mensaje:', error)
      m.reply('‚ùå Error al enviar el desaf√≠o.')
    }
    
    return true
  }

  return false
}

// HANDLER PARA COMANDOS ACEPTAR/RECHAZAR
async function handleAceptarRechazar(m, usuarios, userId, accion) {
  const user = usuarios[userId]
  
  if (!user.batallaTemporal || user.batallaTemporal.estado !== 'esperando_rival') {
    return '‚ùå No tienes desaf√≠os pendientes.'
  }

  const retadorId = user.batallaTemporal.rivalId
  const retador = usuarios[retadorId]
  
  if (!retador || !retador.batallaTemporal) {
    return '‚ùå El desaf√≠o ya expir√≥ o no es v√°lido.'
  }

  if (accion === 'rechazar') {
    // Notificar al retador
    if (retador) {
      await m.reply(`‚ùå ${user.nombre || 'El entrenador'} rechaz√≥ tu desaf√≠o.`)
    }
    
    // Limpiar estados
    delete user.batallaTemporal
    if (retador) delete retador.batallaTemporal
    
    usuarios[userId] = user
    if (retador) usuarios[retadorId] = retador
    guardarJSON(usuariosPath, usuarios)
    
    return '‚úÖ Desaf√≠o rechazado.'
  }

  // ACEPTAR EL DESAF√çO
  const pokemonesUser = obtenerPokemonesUsuario(user)
  
  if (pokemonesUser.length === 0) {
    return '‚ùå No tienes Pok√©mon para combatir.'
  }

  let lista = `‚öîÔ∏è *SELECCIONA TU POK√âMON* ‚öîÔ∏è\n\n`
  lista += `üë§ Retador: ${retador.nombre || 'Entrenador'}\n`
  lista += `üêæ Usar√°: ${retador.batallaTemporal.pokemonUser.nombre}\n\n`
  lista += `üéØ *TUS POK√âMON:*\n\n`
  
  pokemonesUser.forEach((poke, index) => {
    lista += `*${index + 1}.* ${poke.nombre} - Nvl ${poke.nivel || 1}\n`
    lista += `   ‚ù§Ô∏è ${poke.vida || 0}/${poke.vidaMax || 20} | ‚ö° ${Math.round(calcularPoder(poke))}\n\n`
  })
  
  lista += `Responde con el *n√∫mero* del Pok√©mon que quieres usar.`

  // Actualizar estado
  user.batallaTemporal.estado = 'seleccion_rival'
  usuarios[userId] = user
  guardarJSON(usuariosPath, usuarios)

  return lista
}

// HANDLER GLOBAL PARA COMANDOS
export async function all(m, { conn, usedPrefix }) {
  if (!m.text || m.isBaileys) return
  
  const usuarios = cargarJSON(usuariosPath)
  const userId = m.sender.replace(/[^0-9]/g, '')
  const user = usuarios[userId]
  const text = m.text.toLowerCase().trim()

  // Manejar comandos aceptar/rechazar
  if (text === `${usedPrefix}aceptar` || text === 'aceptar') {
    const resultado = await handleAceptarRechazar(m, usuarios, userId, 'aceptar')
    m.reply(resultado)
    return true
  }

  if (text === `${usedPrefix}rechazar` || text === 'rechazar') {
    const resultado = await handleAceptarRechazar(m, usuarios, userId, 'rechazar')
    m.reply(resultado)
    return true
  }

  return false
}

handler.help = ['pelear @usuario', 'pelear lista', 'pelear cancelar']
handler.tags = ['pokemon', 'rpg', 'battle']
handler.command = /^(pelear|batalla|battle|desafiar|challenge)$/i
handler.register = true

export default handler
