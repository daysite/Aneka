import fetch from 'node-fetch';
import { prepareWAMessageMedia, generateWAMessageFromContent } from '@whiskeysockets/baileys';

// API oficial de Pok√©mon TCG
const POKEMON_TCG_API = 'https://api.pokemontcg.io/v2/cards';

// Mapeo de nombres en espa√±ol a ingl√©s (para b√∫squedas m√°s efectivas)
const POKEMON_TRANSLATIONS = {
  'pikachu': 'pikachu',
  'charizard': 'charizard', 
  'mewtwo': 'mewtwo',
  'bulbasaur': 'bulbasaur',
  'squirtle': 'squirtle',
  'charmander': 'charmander',
  'eevee': 'eevee',
  'lucario': 'lucario',
  'gengar': 'gengar',
  'mew': 'mew',
  'lugia': 'lugia',
  'rayquaza': 'rayquaza',
  'garchomp': 'garchomp',
  'snorlax': 'snorlax',
  'dragonite': 'dragonite',
  'blastoise': 'blastoise',
  'venusaur': 'venusaur',
  'gyarados': 'gyarados',
  'arcanine': 'arcanine',
  'umbreon': 'umbreon'
};

let handler = async (m, { conn, command, usedPrefix, args, text }) => {
  // Verificar si es el comando pokecarding
  if (command === 'pokecarding') {
    if (!global.pokecards || !global.pokecards[m.sender]) {
      return conn.reply(m.chat,
        `‚ùå *No hay b√∫squeda activa*\n\n` +
        `Usa primero: ${usedPrefix}pokecard <pok√©mon>`, 
      m);
    }
    
    const userData = global.pokecards[m.sender];
    
    // Limpiar datos despu√©s de 5 minutos
    if (Date.now() - userData.timestamp > 300000) {
      delete global.pokecards[m.sender];
      return conn.reply(m.chat,
        `‚ùå *B√∫squeda expirada*\n\n` +
        `Realiza una nueva b√∫squeda.`, 
      m);
    }
    
    if (!args[0] || isNaN(args[0])) {
      return conn.reply(m.chat,
        `‚ùå *N√∫mero inv√°lido*\n\n` +
        `Usa: ${usedPrefix}pokecarding <n√∫mero>\n` +
        `Ejemplo: ${usedPrefix}pokecarding 1\n\n` +
        `Cartas disponibles: 1-${userData.cards.length}`, 
      m);
    }
    
    const cardIndex = parseInt(args[0]) - 1;
    
    if (cardIndex < 0 || cardIndex >= userData.cards.length) {
      return conn.reply(m.chat,
        `‚ùå *N√∫mero fuera de rango*\n\n` +
        `Solo hay ${userData.cards.length} cartas.\n` +
        `Usa un n√∫mero entre 1 y ${userData.cards.length}`, 
      m);
    }
    
    const card = userData.cards[cardIndex];
    
    try {
      await m.react('üïí');
      
      if (!card.images || !card.images.large) {
        await m.react('‚úñÔ∏è');
        return conn.reply(m.chat,
          `‚ùå *Imagen no disponible*\n\n` +
          `Esta carta no tiene imagen.`, 
        m);
      }
      
      let cardDetails = `üÉè *Detalles de la Carta* üÉè\n\n`;
      cardDetails += `üìõ *Nombre:* ${card.name}\n`;
      if (card.hp) cardDetails += `‚ù§Ô∏è *HP:* ${card.hp}\n`;
      if (card.types) cardDetails += `üéØ *Tipos:* ${card.types.join(', ')}\n`;
      if (card.rarity) cardDetails += `‚≠ê *Rareza:* ${card.rarity}\n`;
      if (card.set) cardDetails += `üé¥ *Set:* ${card.set.name}\n`;
      cardDetails += `\nüåê *Fuente:* Pok√©mon TCG API`;
      
      await conn.sendFile(m.chat, card.images.large, 'pokecard.jpg', cardDetails, m);
      await m.react('‚úÖ');
      
    } catch (error) {
      console.error('Error en pokecarding:', error);
      await m.react('‚úñÔ∏è');
      await conn.reply(m.chat, `‚ùå Error al cargar la imagen`, m);
    }
    return;
  }
  
  // Comando pokecard (b√∫squeda)
  if (!text) {
    return conn.reply(m.chat, 
      `üÉè *Pok√©mon Card Finder* üÉè\n\n` +
      `‚ùå Debes ingresar el nombre de un Pok√©mon.\n\n` +
      `üí° *Ejemplos:*\n` +
      `> ${usedPrefix + command} pikachu\n` +
      `> ${usedPrefix + command} charizard\n` +
      `> ${usedPrefix + command} mewtwo\n\n` +
      `‚ö†Ô∏è *Usa nombres en ingl√©s*`, 
    m);
  }
  
  await m.react('üïí');
  
  try {
    // Convertir a min√∫sculas y buscar traducci√≥n
    const searchTerm = text.toLowerCase().trim();
    const englishName = POKEMON_TRANSLATIONS[searchTerm] || searchTerm;
    
    // Diferentes estrategias de b√∫squeda - SOLO POK√âMON
    const searchStrategies = [
      `name:"${englishName}" supertype:pokemon`,           // B√∫squeda exacta, solo Pok√©mon
      `name:${englishName}* supertype:pokemon`,            // Que comience con, solo Pok√©mon
      `name:*${englishName}* supertype:pokemon`,           // Que contenga, solo Pok√©mon
      `subtypes:${englishName} supertype:pokemon`          // Por subtipo, solo Pok√©mon
    ];
    
    let cards = [];
    let strategyUsed = '';
    
    // Probar diferentes estrategias de b√∫squeda
    for (const strategy of searchStrategies) {
      const searchUrl = `${POKEMON_TCG_API}?q=${encodeURIComponent(strategy)}&pageSize=20&orderBy=-set.releaseDate`;
      
      try {
        const response = await fetch(searchUrl, { 
          timeout: 10000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.data && data.data.length > 0) {
            cards = data.data;
            strategyUsed = strategy;
            break;
          }
        }
      } catch (error) {
        console.log(`Estrategia fallida: ${strategy}`);
      }
    }
    
    if (cards.length === 0) {
      await m.react('‚úñÔ∏è');
      return conn.reply(m.chat, 
        `‚ùå *No se encontraron cartas* üÉè\n\n` +
        `No hay cartas para: *${text}*\n\n` +
        `üí° *Soluciones:*\n` +
        `‚Ä¢ Usa nombres en *ingl√©s* (pikachu, charizard)\n` +
        `‚Ä¢ Pok√©mon m√°s populares\n` +
        `‚Ä¢ Verifica el nombre\n\n` +
        `üìã *Ejemplos que s√≠ funcionan:*\n` +
        `‚Ä¢ ${usedPrefix + command} pikachu\n` +
        `‚Ä¢ ${usedPrefix + command} charizard\n` +
        `‚Ä¢ ${usedPrefix + command} mewtwo`, 
      m);
    }
    
    // Guardar las cartas en temporal
    if (!global.pokecards) global.pokecards = {};
    global.pokecards[m.sender] = {
      cards: cards,
      timestamp: Date.now(),
      search: text
    };
    
    // Seleccionar una carta aleatoria para mostrar en el encabezado
    const randomCard = cards[Math.floor(Math.random() * cards.length)];
    
    // Preparar la imagen para el mensaje interactivo
    let media;
    try {
      media = await prepareWAMessageMedia(
        { image: { url: randomCard.images.large } },
        { upload: conn.waUploadToServer }
      );
    } catch (error) {
      console.error('Error al preparar la imagen:', error);
      // Si falla, crear un mensaje sin imagen
      media = { imageMessage: null };
    }
    
    // Crear el mensaje interactivo con lista de opciones
    const interactiveMessage = {
      body: {
        text: `> *Resultados:* \`${cards.length}\` cartas encontradas\n\n*${randomCard.name}*\n\n‚â° üé¥ *Set:* ${randomCard.set?.name || 'Desconocido'}\n‚â° ‚≠ê *Rareza:* ${randomCard.rarity || 'Com√∫n'}\n‚â° ‚ù§Ô∏è *HP:* ${randomCard.hp || 'N/A'}`
      },
      footer: { text: 'üÉè Pok√©mon TCG Finder' },
      header: {
        title: '```‰πÇ POK√âMON - CARDS```',
        hasMediaAttachment: !!media.imageMessage,
        ...(media.imageMessage && { imageMessage: media.imageMessage })
      },
      nativeFlowMessage: {
        buttons: [
          {
            name: 'single_select',
            buttonParamsJson: JSON.stringify({
              title: 'Selecciona una carta para ver detalles',
              sections: cards.slice(0, 10).map((card, index) => ({
                title: `${card.name}`,
                rows: [
                  {
                    header: card.name,
                    title: `Carta #${index + 1}`,
                    description: `Set: ${card.set?.name || 'Desconocido'} | Rareza: ${card.rarity || 'Com√∫n'}`,
                    id: `.pokecarding ${index + 1}`
                  }
                ]
              }))
            })
          }
        ],
        messageParamsJson: ''
      }
    };

    const userJid = conn?.user?.jid || m.key.participant || m.chat;
    const msg = generateWAMessageFromContent(m.chat, { interactiveMessage }, { userJid, quoted: m });
    await conn.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
    
    await m.react('‚úÖ');
    
  } catch (error) {
    console.error('Error en pokecard:', error);
    await m.react('‚úñÔ∏è');
    
    await conn.reply(m.chat,
      `‚ùå *Error de conexi√≥n*\n\n` +
      `No se pudo conectar con la API.\n\n` +
      `üí° *Intenta:*\n` +
      `‚Ä¢ Verificar tu conexi√≥n a internet\n` +
      `‚Ä¢ Probar en unos minutos\n` +
      `‚Ä¢ Usar Pok√©mon m√°s comunes`, 
    m);
  }
};

// Configuraci√≥n
handler.help = ['pokecard <pok√©mon>', 'pokecarding <n√∫mero>'];
handler.tags = ['pokemon', 'cards'];
handler.command = ['pokecard', 'pkmncard', 'cartapokemon', 'pokecarding'];
handler.register = true;

export default handler;
